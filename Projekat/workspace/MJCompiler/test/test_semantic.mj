program mojProgram

	// Provera tipa
	const nepostojim x = 2, y = 'c';
	null x;
	int provera_tipa1;
	
	// Konstante
	const nepostojim x = 2;
	const int x = 'c', y = true;
	const int const_int1 = 1, const_int2 = 2;
	const char const_char1 = 'c';
	const bool const_bool1 = true;
	
	// Klase(Rekordi)
	record rekord_type1 {
		int fld_int1, fld_int_arr1[];
		bool fld_bool1;
	}
	
	// Promenjive
	nepostojim x;
	int var_int1, var_int_arr1[];
	bool var_bool1;
	rekord_type1 var_rekord_type11;
	
	// Provera konstanta/rekord vec deklarisan
	const int const_int1 = 2;
	record const_int1 {}
	record rekord_type1 {}
{	
	// Metode
	void void_m1() {}
	void void_m2() {
		return;
		return 1;
	}
	int int_m1() {}
	int int_m2() {
		return 1;
		return 'c';
		return;
	}
	void void_m3(nepostojim x) {}
	void void_m4(int arg_int1, int arg_int_arr1[], rekord_type1 arg_rekord_type11) {}
	
	// Provera indeksiranja(Designator)
	void void_m5() {
		var_int1.x = 2;
		var_int_arr1.x = 2;
		var_rekord_type11.x = 2;
		var_rekord_type11.fld_int1 = 1;
		
		var_int1[2] = 2;
		var_rekord_type11[3] = 2;
		var_int_arr1['c'] = 2;
		var_int_arr1[true] = 2;
		var_int_arr1[1] = 2;
		
		var_rekord_type11.fld_int_arr1[2] = 2;
	}
	
	// Designator Statement
	void void_m6() {
		// Provera designator tipa
		const_int1 = 2;
		int_m1 = 2;
		var_int1 = 1;
		void_m1();
		
		// Provera dodele vrednosti
		var_rekord_type11 = 2;
		var_int1 = 'c';
		var_int1 = 2;
		var_rekord_type11 = var_rekord_type11;
		var_rekord_type11 = null;
		
		// Provera inkrementiranja i dekrementiranja
		var_bool1++;
		var_int1++;
		var_bool1--;
		var_int1--;
		
		// Poziv metode
		var_int1();
		void_m1();
	}
	
	// Single statement
	void void_m7() {
		// Provera break/continue
		break;
		continue;
		
		do {
			break;
			continue;
		} while (true);
		
		do {
			do {
				break;
				continue;
			} while (true);
			break;
			continue;
		} while (true);
		
		break;
		continue;
		
		// Provera Read
		read(const_int1);
		read(var_rekord_type11.fld_int_arr1[2]);
		
		read(var_rekord_type11);
		read(var_int1);
		
		// Provera print
		print(var_rekord_type11.fld_int_arr1);
		print(const_int1);
		
		// Provera Condition je bool
		if (1 < 2 || 5) return;
		if (var_rekord_type11 < null) return;
		if (1 < 2 && var_rekord_type11 == null || 5 >= 5 && var_rekord_type11.fld_int_arr1 != null) return;
	}
	
		// Provera argumenata metode
		void void_m8() {
			void_m1(2);
			void_m4(1, 2);
			void_m4('c', var_int_arr1, var_rekord_type11);
			void_m4(1, 'c', var_rekord_type11);
			void_m4(1, var_int_arr1, 'c');
			
			void_m1();
			void_m4(1, var_int_arr1, var_rekord_type11);
			void_m4(1, null, null);
		}
		
		// Provera Expr
		void void_m8() {
			// Provera -Term
			print(-'c');
			print(1);
			
			// Provare Addop/Mulop
			print(1 + 'c');
			print('c' + 'c');
			print(1 + 2);
			print(1 * 'c');
			print('c' * 'c');
			print(1 * 2);
			
			// Provera new
			var_int1 = new int;
			var_int1 = new int['c'];
			var_rekord_type11 = new rekord_type1; 
			var_int_arr1 = new int[2];
		}
		
		// Provera opstih kontekstnih uslova
		void void_m9(int x) 
		// Provera ime ne sme biti vise puta deklarisano unutar istog opsega
		int var_int1;
		int x;
		{
			// Provera svako ime u programu mora biti deklarisano pre prvog koriscenja
			nepostojim = 2;
			var_int1 = 2;
		}
		
		// Provera metoda vec deklarisana
		void void_m9() {}
		void var_int1() {}
		
		void main() {}  
}