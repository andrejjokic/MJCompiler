package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	Logger log = Logger.getLogger(getClass());
   
    /* Following methods are redefined in purpose of different error message output */
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
    	done_parsing();
      	report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	StringBuilder msg = new StringBuilder(message); 
    	
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
            
        log.error(msg.toString());
    }
    
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
		
	return s;
:}


/* Keyword terminals */
terminal					PROG, BREAK, CLASS, ENUM, ELSE, CONST, IF, DO, WHILE, NEW, PRINT;
terminal					READ, RETURN, VOID, EXTENDS, CONTINUE, THIS, SUPER, GOTO, RECORD;

/* Identifier terminals */
terminal	String			IDENT;

/* Constant terminals */
terminal	Integer			NUMBER;
terminal	Character 		CHAR;
terminal	Boolean			BOOL;
	
/* Operator terminals */
terminal					PLUS, MINUS, MUL, DIV, PERCENT, EQ, NEQ, GT, GTE, LT, LTE, AND ,OR, EQUAL, PLUSPLUS;
terminal					MINUSMINUS, SEMI, COLON, COMMA, DOT, LPAREN, RPAREN, LBRACE, RBRACE, LBRACKET, RBRACKET;

/* Nonterminals */
nonterminal					DeclList DeclList;
nonterminal Decl Decl;
nonterminal					ConstListDecls ConstListDecls;
nonterminal ConstDeclList ConstDeclList;
nonterminal ConstDecl ConstDecl;
nonterminal ConstDeclType ConstDeclType;
nonterminal					Label Label;
nonterminal					RecordDecl RecordDecl;
nonterminal					VarListDeclList VarListDeclList;
nonterminal VarListDecls VarListDecls;
nonterminal VarDeclList VarDeclList;
nonterminal VarDecl VarDecl;
nonterminal VarListDeclsType VarListDeclsType;
nonterminal					ClassDecl ClassDecl;
nonterminal ClassMethodDecls ClassMethodDecls;
nonterminal MethodDeclList MethodDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal					FormPars FormPars;
nonterminal FormParamList FormParamList;
nonterminal FormParam FormParam;
nonterminal					DesignatorName DesignatorName;
nonterminal IndexingList IndexingList;
nonterminal Indexing Indexing;
nonterminal					Statements Statements;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal SingleStatement SingleStatement;
nonterminal DoStatementStart DoStatementStart;
nonterminal					DesignatorStatement DesignatorStatement;
nonterminal					OptActPars OptActPars;
nonterminal ActPars ActPars;
nonterminal PrintPars PrintPars;
nonterminal					Mulop Mulop;
nonterminal Addop Addop;
nonterminal Assignop Assignop;

nonterminal		rs.etf.pp1.symboltable.concepts.Obj		ProgName, Program;
nonterminal		rs.etf.pp1.symboltable.concepts.Obj		MethodIdent;
nonterminal		rs.etf.pp1.symboltable.concepts.Obj		Designator;
nonterminal		rs.etf.pp1.symboltable.concepts.Struct	Type, ReturnType;
nonterminal		rs.etf.pp1.symboltable.concepts.Struct	RecordName, ClassIdent, ExtendsClause;
nonterminal		rs.etf.pp1.symboltable.concepts.Struct	Const, Expr, Term, Factor;
nonterminal		rs.etf.pp1.symboltable.concepts.Struct	Condition, CondTerm, CondFact;

/* Priorities */
precedence		left		ELSE;

/* Grammar Rules */
Program 			::=		(Program) PROG ProgName:p DeclList:D1 LBRACE MethodDeclList:M2 RBRACE {: RESULT=new Program(p, D1, M2); RESULT.setLine(pleft); :};

ProgName			::=		(ProgName) IDENT:progName {: RESULT=new ProgName(progName); RESULT.setLine(progNameleft); :};

DeclList			::=		(Declarations) DeclList:D1 Decl:D2 {: RESULT=new Declarations(D1, D2); RESULT.setLine(D1left); :}
							|
							(NoDeclarations) {: RESULT=new NoDeclarations(); :} /* epsilon */;
							
Decl				::=		(DeclConst) ConstListDecls:C1 {: RESULT=new DeclConst(C1); RESULT.setLine(C1left); :}
							|
							(DeclVar)	VarListDecls:V1 {: RESULT=new DeclVar(V1); RESULT.setLine(V1left); :}
							|
							(DeclClass) ClassDecl:C1 {: RESULT=new DeclClass(C1); RESULT.setLine(C1left); :}
							|
							(DeclRecord) RecordDecl:R1 {: RESULT=new DeclRecord(R1); RESULT.setLine(R1left); :}
							|
							error SEMI {: RESULT=new DeclDerived1(); :}
							|
							error COMMA {: RESULT=new DeclDerived2(); :};

ConstListDecls		::=		(ConstListDeclarations) CONST ConstDeclType:C1 ConstDeclList:C2 SEMI {: RESULT=new ConstListDeclarations(C1, C2); RESULT.setLine(C1left); :};

ConstDeclType		::=		(ConstDeclType) Type:T1 {: RESULT=new ConstDeclType(T1); RESULT.setLine(T1left); :};

ConstDeclList		::=		(MultipleConstDecls) ConstDeclList:C1 COMMA ConstDecl:C2 {: RESULT=new MultipleConstDecls(C1, C2); RESULT.setLine(C1left); :}
							|
							(SingleConstDecl) ConstDecl:C1 {: RESULT=new SingleConstDecl(C1); RESULT.setLine(C1left); :};
							
ConstDecl			::=		(ConstDecl) IDENT:constName EQUAL Const:c {: RESULT=new ConstDecl(constName, c); RESULT.setLine(constNameleft); :};

Const				::=		(NumConst) NUMBER:val {: RESULT=new NumConst(val); RESULT.setLine(valleft); :}
							|
							(CharConst) CHAR:val {: RESULT=new CharConst(val); RESULT.setLine(valleft); :}
							|
							(BoolConst) BOOL:val {: RESULT=new BoolConst(val); RESULT.setLine(valleft); :};		
							
Type				::=		(Type) IDENT:typeName {: RESULT=new Type(typeName); RESULT.setLine(typeNameleft); :};

Label				::=		(Label) IDENT:I1 {: RESULT=new Label(I1); RESULT.setLine(I1left); :};

VarListDecls		::=		(VarListDeclarations) VarListDeclsType:V1 VarDeclList:V2 SEMI {: RESULT=new VarListDeclarations(V1, V2); RESULT.setLine(V1left); :};

VarListDeclsType	::= 	(VarListDeclsType) Type:T1 {: RESULT=new VarListDeclsType(T1); RESULT.setLine(T1left); :};

VarDeclList			::=		(MultipleVarDecls) VarDeclList:V1 COMMA VarDecl:V2 {: RESULT=new MultipleVarDecls(V1, V2); RESULT.setLine(V1left); :}
							|
							(SingleVarDecl) VarDecl:V1 {: RESULT=new SingleVarDecl(V1); RESULT.setLine(V1left); :};
							
VarDecl				::=		(VarDeclBrackets) IDENT:varName LBRACKET RBRACKET {: RESULT=new VarDeclBrackets(varName); RESULT.setLine(varNameleft); :}
							|
							(VarDeclNoBrackets) IDENT:varName {: RESULT=new VarDeclNoBrackets(varName); RESULT.setLine(varNameleft); :};

ClassDecl			::=		(ClassDeclaration) CLASS ClassIdent:c LBRACE VarListDeclList:V1 ClassMethodDecls:C2 RBRACE {: RESULT=new ClassDeclaration(c, V1, C2); RESULT.setLine(cleft); :};

ClassIdent			::=		(ClassIdent) IDENT:name ExtendsClause:e {: RESULT=new ClassIdent(name, e); RESULT.setLine(nameleft); :};

ExtendsClause		::=		(Extends) EXTENDS Type:T1 {: RESULT=new Extends(T1); RESULT.setLine(T1left); :}
							|
							(NoExtends) {: RESULT=new NoExtends(); :} /* epsilon */;
					
VarListDeclList		::=		(VarListDeclarationList) VarListDeclList:V1 VarListDecls:V2 {: RESULT=new VarListDeclarationList(V1, V2); RESULT.setLine(V1left); :}
							|
							(NoVarListDeclarationList) {: RESULT=new NoVarListDeclarationList(); :} /* epsilon */;
							
RecordDecl			::=		(RecordDeclaration) RECORD RecordName:r LBRACE VarListDeclList:V1 RBRACE {: RESULT=new RecordDeclaration(r, V1); RESULT.setLine(rleft); :};

RecordName			::=		(RecordName) IDENT:name {: RESULT=new RecordName(name); RESULT.setLine(nameleft); :};
											
ClassMethodDecls	::=		(ClassMethodDeclarations) LBRACE MethodDeclList:M1 RBRACE {: RESULT=new ClassMethodDeclarations(M1); RESULT.setLine(M1left); :}
							|
							(NoClassMethodDeclarations) {: RESULT=new NoClassMethodDeclarations(); :} /* epsilon */;
							
MethodDeclList		::=		(MethodDeclarations) MethodDeclList:M1 MethodDecl:M2 {: RESULT=new MethodDeclarations(M1, M2); RESULT.setLine(M1left); :}
							|
							(NoMethodDeclarations) {: RESULT=new NoMethodDeclarations(); :} /* epsilon */;
							
MethodDecl			::=		(MethodDecl) MethodIdent:m LPAREN FormPars:F1 RPAREN VarListDeclList:V2 LBRACE StatementList:S3 RBRACE {: RESULT=new MethodDecl(m, F1, V2, S3); RESULT.setLine(mleft); :};

MethodIdent			::=		(MethodIdent) ReturnType:r IDENT:name {: RESULT=new MethodIdent(r, name); RESULT.setLine(rleft); :};

ReturnType			::=		(RetType) Type:t {: RESULT=new RetType(t); RESULT.setLine(tleft); :}
							|
							(RetVoid) VOID {: RESULT=new RetVoid(); :};
							
FormPars			::=		(FormParams) FormParamList:F1 {: RESULT=new FormParams(F1); RESULT.setLine(F1left); :}
							|
							(NoFormParams) {: RESULT=new NoFormParams(); :} /* epsilon */;
							
FormParamList		::=		(MultipleFormParams) FormParamList:F1 COMMA FormParam:F2 {: RESULT=new MultipleFormParams(F1, F2); RESULT.setLine(F1left); :}
							|
							(SingleFormParam) FormParam:F1 {: RESULT=new SingleFormParam(F1); RESULT.setLine(F1left); :};

FormParam			::=		(FormalParameterBrackets) Type:T1 IDENT:name LBRACKET RBRACKET {: RESULT=new FormalParameterBrackets(T1, name); RESULT.setLine(T1left); :}
							|
							(FormalParameterNoBrackets) Type:T1 IDENT:name {: RESULT=new FormalParameterNoBrackets(T1, name); RESULT.setLine(T1left); :}
							|
							error {: RESULT=new FormParamDerived1(); :};
						
StatementList		::=		(Stmts) StatementList:S1 Statement:S2 {: RESULT=new Stmts(S1, S2); RESULT.setLine(S1left); :}
							|
							(NoStmt) {: RESULT=new NoStmt(); :} /* epsilon */;
							
Statement			::=		(SingleStmtWithLabel) Label:L1 COLON SingleStatement:S2 {: RESULT=new SingleStmtWithLabel(L1, S2); RESULT.setLine(L1left); :}
							|
							(SingleStmtNoLabel) SingleStatement:S1 {: RESULT=new SingleStmtNoLabel(S1); RESULT.setLine(S1left); :}
							|
							(MultipleStmts) Statements:S1 {: RESULT=new MultipleStmts(S1); RESULT.setLine(S1left); :};

Statements			::=		(Statements) LBRACE StatementList:S1 RBRACE {: RESULT=new Statements(S1); RESULT.setLine(S1left); :};

SingleStatement		::=		(IfStmt) IF LPAREN Condition:C1 RPAREN Statement:S2 {: RESULT=new IfStmt(C1, S2); RESULT.setLine(C1left); :}
							|
							(IfElseStmt) IF LPAREN Condition:C1 RPAREN Statement:S2 ELSE Statement:S3 {: RESULT=new IfElseStmt(C1, S2, S3); RESULT.setLine(C1left); :}
							|
							(DoWhileStmt) DoStatementStart:D1 Statement:S2 WHILE LPAREN Condition:C3 RPAREN SEMI {: RESULT=new DoWhileStmt(D1, S2, C3); RESULT.setLine(D1left); :}
							|
							(DesignatorStmt) DesignatorStatement:D1 SEMI {: RESULT=new DesignatorStmt(D1); RESULT.setLine(D1left); :}
							|
							(BreakStmt) BREAK SEMI {: RESULT=new BreakStmt(); :}
							|
							(ContinueStmt) CONTINUE SEMI {: RESULT=new ContinueStmt(); :}
							|
							(GotoStmt) GOTO Label:L1 SEMI {: RESULT=new GotoStmt(L1); RESULT.setLine(L1left); :}
							|
							(ReturnNoExprStmt) RETURN SEMI {: RESULT=new ReturnNoExprStmt(); :}
							|
							(ReturnExprStmt) RETURN Expr:e SEMI {: RESULT=new ReturnExprStmt(e); RESULT.setLine(eleft); :}
							|
							(ReadStmt) READ LPAREN Designator:D1 RPAREN SEMI {: RESULT=new ReadStmt(D1); RESULT.setLine(D1left); :}
							|
							(PrintStmt) PRINT LPAREN PrintPars:P1 RPAREN SEMI {: RESULT=new PrintStmt(P1); RESULT.setLine(P1left); :};
							
DoStatementStart	::=		(DoStatementStart) DO {: RESULT=new DoStatementStart(); :};

Expr				::=		(MultipleExpr) Expr:e Addop:A1 Term:t {: RESULT=new MultipleExpr(e, A1, t); RESULT.setLine(eleft); :}
							|
							(SingleExprWithMinus) MINUS Term:t {: RESULT=new SingleExprWithMinus(t); RESULT.setLine(tleft); :}
							|
							(SingleExpr) Term:t {: RESULT=new SingleExpr(t); RESULT.setLine(tleft); :};
							
Term				::=		(MultipleTerm) Term:t Mulop:M1 Factor:f {: RESULT=new MultipleTerm(t, M1, f); RESULT.setLine(tleft); :}
							|
							(SingleTerm) Factor:f {: RESULT=new SingleTerm(f); RESULT.setLine(fleft); :};

Factor				::=		(FactorWithConst) Const:c {: RESULT=new FactorWithConst(c); RESULT.setLine(cleft); :}
							|
							(FactorWithParen) LPAREN Expr:e RPAREN {: RESULT=new FactorWithParen(e); RESULT.setLine(eleft); :}
							|
							(FactorWithNew) NEW Type:t {: RESULT=new FactorWithNew(t); RESULT.setLine(tleft); :}
							|
							(FactorWithNewArray) NEW Type:t LBRACKET Expr:e RBRACKET {: RESULT=new FactorWithNewArray(t, e); RESULT.setLine(tleft); :}
							|
							(FactorDesignator) Designator:d {: RESULT=new FactorDesignator(d); RESULT.setLine(dleft); :}
							|
							(FactorDesignatorFuncCall) Designator:d LPAREN OptActPars:O1 RPAREN {: RESULT=new FactorDesignatorFuncCall(d, O1); RESULT.setLine(dleft); :};
							
Designator			::=		(Designator) DesignatorName:D1 IndexingList:I2 {: RESULT=new Designator(D1, I2); RESULT.setLine(D1left); :};

DesignatorName		::=		(DesignatorName) IDENT:name {: RESULT=new DesignatorName(name); RESULT.setLine(nameleft); :};

IndexingList		::=		(MultipleIndexing) IndexingList:I1 Indexing:I2 {: RESULT=new MultipleIndexing(I1, I2); RESULT.setLine(I1left); :}
							|
							(NoIndexing) {: RESULT=new NoIndexing(); :} /* epsilon */;
							
Indexing			::=		(IndexingField) DOT IDENT:identName {: RESULT=new IndexingField(identName); RESULT.setLine(identNameleft); :}
							|
							(IndexingArray) LBRACKET Expr:e RBRACKET {: RESULT=new IndexingArray(e); RESULT.setLine(eleft); :};
							
OptActPars			::=		(WithOptActPars) ActPars:A1 {: RESULT=new WithOptActPars(A1); RESULT.setLine(A1left); :}
							|
							(NoOptActPars) {: RESULT=new NoOptActPars(); :} /* epsilon */; 
							
ActPars				::=		(MultipleActPars) ActPars:A1 COMMA Expr:e {: RESULT=new MultipleActPars(A1, e); RESULT.setLine(A1left); :}
							|
							(SingleActPars) Expr:e {: RESULT=new SingleActPars(e); RESULT.setLine(eleft); :};
							
Mulop				::=		(Mul) MUL {: RESULT=new Mul(); :}
							|
							(Div) DIV {: RESULT=new Div(); :}
							|
							(Percent) PERCENT {: RESULT=new Percent(); :};
							
Addop				::=		(Add) PLUS {: RESULT=new Add(); :}
							|
							(Minus) MINUS {: RESULT=new Minus(); :};
							
Assignop			::=		(Assignop) EQUAL {: RESULT=new Assignop(); :};
					
PrintPars			::=		(PrintParameters) Expr:E1 {: RESULT=new PrintParameters(E1); RESULT.setLine(E1left); :}
							|
							(PrintParametersWithConst) Expr:E1 COMMA NUMBER:N2 {: RESULT=new PrintParametersWithConst(E1, N2); RESULT.setLine(E1left); :};
							
DesignatorStatement	::=		(DesignatorStmtAssign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorStmtAssign(D1, A2, E3); RESULT.setLine(D1left); :}
							|
							Designator:D1 Assignop:A2 error {: RESULT=new DesignatorStatementDerived1(D1, A2); RESULT.setLine(D1left); :}
							|
							(DesignatorStmtFuncCall) Designator:D1 LPAREN OptActPars:O2 RPAREN {: RESULT=new DesignatorStmtFuncCall(D1, O2); RESULT.setLine(D1left); :}
							|
							(DesignatorStmtInc) Designator:D1 PLUSPLUS {: RESULT=new DesignatorStmtInc(D1); RESULT.setLine(D1left); :}
							|
							(DesignatorStmtDec) Designator:D1 MINUSMINUS {: RESULT=new DesignatorStmtDec(D1); RESULT.setLine(D1left); :};
							
Condition			::=		(MultipleConditions) Condition:c OR CondTerm:ct {: RESULT=new MultipleConditions(c, ct); RESULT.setLine(cleft); :}
							|
							(SingleCondition) CondTerm:ct {: RESULT=new SingleCondition(ct); RESULT.setLine(ctleft); :}
							|
							error {: RESULT=new ConditionDerived1(); :};
							
CondTerm			::=		(MultipleCondTerms) CondTerm:ct AND CondFact:cf {: RESULT=new MultipleCondTerms(ct, cf); RESULT.setLine(ctleft); :}
							|
							(SingleCondTerm) CondFact:ct {: RESULT=new SingleCondTerm(ct); RESULT.setLine(ctleft); :};
							
CondFact			::=		(SingleCondFact) Expr:E1 {: RESULT=new SingleCondFact(E1); RESULT.setLine(E1left); :}
							|
							(EQCondFact) Expr:e1 EQ Expr:e2 {: RESULT=new EQCondFact(e1, e2); RESULT.setLine(e1left); :}
							|
							(NEQCondFact) Expr:e1 NEQ Expr:e2 {: RESULT=new NEQCondFact(e1, e2); RESULT.setLine(e1left); :}
							|
							(GTCondFact) Expr:e1 GT Expr:e2 {: RESULT=new GTCondFact(e1, e2); RESULT.setLine(e1left); :}
							|
							(GTECondFact) Expr:e1 GTE Expr:e2 {: RESULT=new GTECondFact(e1, e2); RESULT.setLine(e1left); :}
							|
							(LTCondFact) Expr:e1 LT Expr:e2 {: RESULT=new LTCondFact(e1, e2); RESULT.setLine(e1left); :}
							|
							(LTECondFact) Expr:e1 LTE Expr:e2 {: RESULT=new LTECondFact(e1, e2); RESULT.setLine(e1left); :};